// Part 4
class Shape {
    constructor(sides = []) {
        this.sides = sides;
    } 
    perimeter = () => (this.sides.length > 0 ? this.sides.reduce((sum, side) => sum + side, 0) : 0);
}

/*
console.log(new Shape([5, 10]).perimeter());  // 15
console.log(new Shape([1, 2, 3, 4, 5]).perimeter()); // 15
console.log(new Shape().perimeter()); // 0
*/

// Part 5
class Rectangle extends Shape {
    constructor(length = 0, width = 0) {
        super([length, width, length, width]); 
        this.length = length;
        this.width = width;
    }
    area() {
        return this.length * this.width;
    } 
}

/*
console.log(new Rectangle(4, 4).perimeter());  // 16
console.log(new Rectangle(4, 4).area());  // 16
console.log(new Rectangle(5, 5).perimeter()); // 20
console.log(new Rectangle(5, 5).area()); // 25
console.log(new Rectangle().perimeter()); // 0
console.log(new Rectangle().area()); // 0
*/

// Part 6
class Triangle extends Shape {
    constructor(sideA = 0, sideB = 0, sideC = 0) {
        super([sideA, sideB, sideC]);
        this.sideA = sideA;
        this.sideB = sideB;
        this.sideC = sideC;
    }
    area() {
        let s = (this.sideA + this.sideB + this.sideC) / 2;
        return Math.sqrt(s * (s - this.sideA) * (s - this.sideB) * (s - this.sideC));
    }
}

/*
console.log(new Triangle(3, 4, 5).perimeter());  // 12
console.log(new Triangle(3, 4, 5).area());  // 6
console.log(new Triangle().perimeter()); // 0
console.log(new Triangle().area()); // 0
*/

// Part 7
const data = [ [3, 4], [5, 5], [3, 4, 5], [10], [] ];

// Check if values of array are the same 
const equalValues = data => data.every( num => num === data[0]);

for (let i = 0; i < data.length; i++) {
    let numbers = data[i].toString();
    switch(data[i].length) {
        case 2:
            if (equalValues(data[i]) === true) {
                console.log(`Square with sides ${numbers} has perimeter of ${new Rectangle(...data[i]).perimeter()} and area of ${new Rectangle(...data[i]).area()}`)
            } else {
            console.log(`Rectangle with sides ${numbers} has perimeter of ${new Rectangle(...data[i]).perimeter()} and area of ${new Rectangle(...data[i]).area()}`);
            } break;
        case 3:
            console.log(`Triangle with sides ${numbers} has perimeter of ${new Triangle(...data[i]).perimeter()} and area of ${new Triangle(...data[i]).area()}`);
            break;
        default:
            console.log(`Shape with ${data[i].length} side unsupported`);
            break;
    }
}
